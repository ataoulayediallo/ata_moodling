{"version":3,"file":"dialoguedom.min.js","sources":["../../../src/local/activitychooser/dialoguedom.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {addIconToContainer} from 'core/loadingicon';\nimport Carousel from 'theme_boost/bootstrap/carousel';\nimport {getFirst} from 'core/normalise';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport Tab from 'theme_boost/bootstrap/tab';\nimport * as Templates from 'core/templates';\n\n\n/**\n * The activity changer dialogue DOM manipulation module.\n *\n * @module     core_course/local/activitychooser/dialoguedom\n * @copyright  2025 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class ChooserDialogueDOM {\n    /**\n     * ChooserDialogueDOM constructor.\n     *\n     * @param {Object} dialogue The dialogue object.\n     * @param {Modal} modal The modal object.\n     * @param {Object} exporter The exporter object to generate template data.\n     */\n    constructor(dialogue, modal, exporter) {\n        this.modal = modal;\n        this.modalBody = getFirst(this.modal.getBody());\n        this.exporter = exporter;\n        // Temporal variable while migrating methods.\n        this.dialogue = dialogue;\n    }\n\n    /**\n     * Get the search input element.\n     *\n     * @return {HTMLElement} The search input element.\n     */\n    getSearchInputElement() {\n        return this.modalBody.querySelector(selectors.actions.search);\n    }\n\n    /**\n     * Get the closest chooser option element.\n     *\n     * @param {HTMLElement} element\n     * @return {HTMLElement|null} element\n     */\n    getClosestChooserOption(element) {\n        return element.closest(selectors.regions.chooserOption.container);\n    }\n\n    /**\n     * Check if the search tab is active.\n     *\n     * @return {Boolean} True if the search tab is active, false otherwise.\n     */\n    isFavoutiteTabActive() {\n        const favouriteTab = this.modalBody.querySelector(selectors.regions.favouriteTabNav);\n        return favouriteTab && favouriteTab.classList.contains('active');\n    }\n\n    /**\n     * Get the URL of a chooser option.\n     *\n     * @param {HTMLElement} optionContainer The container of the chooser option.\n     * @return {String} The URL of the chooser option.\n     * @throws {Error} If the option container does not contain a link.\n     */\n    getChooserOptionUrl(optionContainer) {\n        const optionLink = optionContainer.querySelector(selectors.actions.addChooser);\n        if (!optionLink) {\n            throw new Error('Invalid chooser option container: no link found');\n        }\n        return optionLink.getAttribute('href');\n    }\n\n    /**\n     * Show the search results.\n     *\n     * @param {Object} searchResultsData Data containing the module items that satisfy the search criteria\n     */\n    async refreshSearchResults(searchResultsData) {\n        const searchResultsContainer = this.modalBody.querySelector(selectors.regions.searchResults);\n        const clearSearchButton = this.modalBody.querySelector(selectors.actions.clearSearch);\n\n        await this.renderSearchResults(searchResultsContainer, searchResultsData);\n        const chooserOptionsContainer = searchResultsContainer.querySelector(selectors.regions.chooserOptions);\n        const firstSearchResultItem = chooserOptionsContainer.querySelector(selectors.regions.chooserOption.container);\n        if (firstSearchResultItem) {\n            // Set the first result item to be focusable.\n            this.toggleFocusableChooserOption(firstSearchResultItem, true);\n            // Register keyboard events on the created search result items.\n        }\n        clearSearchButton.classList.remove('d-none');\n\n        // Results are rendered in the all activities tab, so we need to hide the category content.\n        const tabContent = searchResultsContainer.closest(selectors.regions.tabContent);\n        const categoryContent = tabContent.querySelector(selectors.regions.categoryContent);\n        categoryContent.classList.add('d-none');\n    }\n\n    /**\n     * Clear the search results.\n     */\n    cleanSearchResults() {\n        const searchResultsContainer = this.modalBody.querySelector(selectors.regions.searchResults);\n        const clearSearchButton = this.modalBody.querySelector(selectors.actions.clearSearch);\n        searchResultsContainer.innerHTML = '';\n        clearSearchButton.classList.add('d-none');\n\n        // Results are rendered in the all activities tab, so we need to show the category content again.\n        const tabContent = searchResultsContainer.closest(selectors.regions.tabContent);\n        const categoryContent = tabContent.querySelector(selectors.regions.categoryContent);\n        categoryContent.classList.remove('d-none');\n    }\n\n    /**\n     * Render the search results in a defined container\n     *\n     * @private\n     * @method renderSearchResults\n     * @param {HTMLElement} searchResultsContainer The container where the data should be rendered\n     * @param {Object} searchResultsData Data containing the module items that satisfy the search criteria\n     */\n    async renderSearchResults(searchResultsContainer, searchResultsData) {\n        const templateData = this.exporter.getSearchResultData(searchResultsData);\n        // Build up the html & js ready to place into the help section.\n        const {html, js} = await Templates.renderForPromise(\n            'core_course/local/activitychooser/search_results',\n            templateData\n        );\n        await Templates.replaceNodeContents(searchResultsContainer, html, js);\n    }\n\n    /**\n     * Show the \"All activities\" tab.\n     *\n     * @method showAllActivitiesTab\n     * @return {HTMLElement} The \"All activities\" tab element.\n     */\n    showAllActivitiesTab() {\n        const navTab = this.modalBody.querySelector(selectors.regions.allTabNav);\n\n        if (navTab.classList.contains('active')) {\n            return navTab;\n        }\n\n        const pendingPromise = new Pending('core_course/activitychooser:alltab');\n        navTab.addEventListener('shown.bs.tab', pendingPromise.resolve, {once: true});\n\n        Tab.getOrCreateInstance(navTab).show();\n        return navTab;\n    }\n\n    /**\n     * Update the starred icons in the chooser modal.\n     *\n     * @method updateItemStarredIcons\n     * @param {String} internal The internal name of the module.\n     * @param {Boolean} favourite Whether the module is a favourite or not.\n     */\n    updateItemStarredIcons(internal, favourite) {\n        const favouriteButtons = this.modalBody.querySelectorAll(\n            `${selectors.elements.moduleItem(internal)} ${selectors.actions.optionActions.manageFavourite}`\n        );\n        Array.from(favouriteButtons).forEach((element) => {\n            element.classList.toggle('text-muted', !favourite);\n            element.classList.toggle('text-primary', favourite);\n            element.dataset.favourited = favourite;\n            element.setAttribute('aria-pressed', favourite);\n            element.querySelector(selectors.elements.favouriteIconActive)?.classList.toggle('d-none', !favourite);\n            element.querySelector(selectors.elements.favouriteIconInactive)?.classList.toggle('d-none', favourite);\n\n            const iconSelectsor = favourite ? selectors.elements.favouriteIconActive : selectors.elements.favouriteIconInactive;\n            const favouriteIcon = element.querySelector(iconSelectsor);\n            element.setAttribute('aria-label', favouriteIcon?.getAttribute('data-action-label') || '');\n        });\n    }\n\n    /**\n     * Refresh the favourite content.\n     *\n     * @param {Array} mappedModules The modules to be displayed in the favourite tab.\n     */\n    async refreshFavouritesTabContent(mappedModules) {\n        const templateData = await this.exporter.getFavouriteTabData(mappedModules);\n        const favouriteArea = this.modalBody.querySelector(selectors.regions.favouriteTab);\n        const {html, js} = await Templates.renderForPromise(\n            'core_course/local/activitychooser/tabcontent',\n            templateData,\n        );\n        await Templates.replaceNodeContents(favouriteArea, html, js);\n    }\n\n    /**\n     * Toggle the display of the favourite tab.\n     *\n     * The favourite tab is only displayed when there are favourite modules\n     * or when it is the active tab.\n     *\n     * @param {Boolean} displayed Whether we want to show or hide the favourite tab\n     */\n    toggleFavouriteTabDisplay(displayed) {\n        const favouriteTabNav = this.modalBody.querySelector(selectors.regions.favouriteTabNav);\n\n        let moveFocusTo;\n        if (!displayed && favouriteTabNav.classList.contains('active')) {\n            moveFocusTo = this.showAllActivitiesTab();\n        }\n\n        favouriteTabNav?.classList.toggle('d-none', !displayed);\n        favouriteTabNav.tabIndex = displayed ? 0 : -1;\n        // The disabled class is used by Boostrap Tab for keyboard navigation.\n        if (displayed) {\n            favouriteTabNav.classList.remove('disabled');\n        } else {\n            favouriteTabNav.classList.add('disabled');\n        }\n\n        if (moveFocusTo) {\n            moveFocusTo.focus();\n        }\n        this.initActiveTabNavigation();\n    }\n\n    /**\n     * Given an event from the main module 'page' navigate to it's help section via a carousel.\n     *\n     * @method showModuleHelp\n     * @param {Object} moduleData Data of the module to carousel to\n     */\n    async showModuleHelp(moduleData) {\n        const carousel = this.modalBody.querySelector(selectors.regions.carousel);\n\n        const help = carousel.querySelector(selectors.regions.help);\n        help.innerHTML = '';\n        help.classList.add('m-auto');\n\n        // Add a spinner.\n        const spinnerPromise = addIconToContainer(help);\n\n        // Used later...\n        let transitionPromiseResolver = null;\n        const transitionPromise = new Promise(resolve => {\n            transitionPromiseResolver = resolve;\n        });\n\n        // Build up the html & js ready to place into the help section.\n        const contentPromise = Templates.renderForPromise(\n            'core_course/local/activitychooser/help',\n            await this.exporter.getModuleHelpTemplateData(moduleData),\n        );\n\n        // Wait for the content to be ready, and for the transition to be complet.\n        Promise.all([contentPromise, spinnerPromise, transitionPromise])\n            .then(([{html, js}]) => Templates.replaceNodeContents(help, html, js))\n            .then(() => {\n                help.querySelector(selectors.regions.chooserSummary.header).focus();\n                return help;\n            })\n            .catch(Notification.exception);\n\n        // Move to the next slide, and resolve the transition promise when it's done.\n        carousel.addEventListener(\n            'slid.bs.carousel',\n            () => {\n                transitionPromiseResolver();\n            },\n            {once: true}\n        );\n        // Trigger the transition between 'pages'.\n        Carousel.getInstance(carousel).next();\n    }\n\n    /**\n     * Hide the help section of the chooser.\n     *\n     * @param {String|null} internal The internal name of the module to return to, if any.\n     */\n    hideModuleHelp(internal = null) {\n        const carousel = this.modalBody.querySelector(selectors.regions.carousel);\n        // Trigger the transition between 'pages'.\n        Carousel.getInstance(carousel).to(0);\n        // Some active footers may not provide a valid internal value.\n        if (!internal) {\n            return;\n        }\n        carousel.addEventListener(\n            'slid.bs.carousel',\n            () => {\n                this.focusChooserOption(internal);\n            },\n            {once: true}\n        );\n    }\n\n    /**\n     * Set the module data for the back button.\n     *\n     * @param {Object} moduleData The module data to set for the back button.\n     */\n    setBackButtonModuleData(moduleData) {\n        const footer = getFirst(this.modal.getFooter());\n        const modnameValue = `${moduleData.componentname}_${moduleData.link}`;\n        footer.querySelector(selectors.actions.closeOption).dataset.modname = modnameValue;\n    }\n\n    /**\n     * Toggle the visibility of the back button.\n     *\n     * @param {Boolean} show Whether to show or hide the back button.\n     */\n    toggleBackButton(show) {\n        const footer = getFirst(this.modal.getFooter());\n        footer.querySelector(selectors.actions.closeOption).classList.toggle('d-none', !show);\n    }\n\n    /**\n     * Toggle the visibility of the \"Add selected\" button.\n     *\n     * @param {Boolean} show Whether to show or hide the \"Add selected\" button.\n     */\n    toggleAddButton(show) {\n        const footer = getFirst(this.modal.getFooter());\n        footer.querySelector(selectors.actions.addSelectedChooserOption).classList.toggle('d-none', !show);\n    }\n\n    /**\n     * Toggle the visibility of the active footer.\n     *\n     * @param {Boolean} show Whether to show or hide the active footer.\n     */\n    toggleActiveFooter(show) {\n        const footer = getFirst(this.modal.getFooter());\n        footer.querySelector(selectors.regions.activeFooter).classList.toggle('d-none', !show);\n    }\n\n    /**\n     * Focus on a specific activity inside the active tab (if present).\n     *\n     * @private\n     * @method focusChooserOption\n     * @param {String} internal The internal name of the module.\n     */\n    focusChooserOption(internal) {\n        const currentTabNav = this.modalBody.querySelector(selectors.elements.activetab);\n        const activeSectionId = currentTabNav.getAttribute(\"href\");\n        const sectionChooserOptions = this.modalBody.querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\n        const newCurrent = sectionChooserOptions.querySelector(selectors.regions.getModuleSelector(internal));\n\n        if (!newCurrent) {\n            throw new Error(`Invalid chooser option to focus on: ${internal}`);\n        }\n\n        // Chooser can only have one element focusable at a time, so we disable them all first.\n        this.disableFocusAllChooserOptions(currentTabNav);\n        this.toggleFocusableChooserOption(newCurrent, true);\n\n        // Little hack: we want the element considered a focus-visible element.\n        // But the focus method does not trigger the focus-visible class. There's an\n        // experimental \"{focusVisible: true}\" option in the focus method, but it's not\n        // supported in all browsers yet so we need to fake an editable element.\n        newCurrent.contentEditable = true;\n        newCurrent.focus();\n        newCurrent.contentEditable = false;\n    }\n\n    /**\n     * Initialise the active tab navigation.\n     */\n    initActiveTabNavigation() {\n        const activeSectionId = this.modalBody.querySelector(selectors.elements.activetab).getAttribute(\"href\");\n        const sectionChooserOptions = this.modalBody.querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\n        const firstChooserOption = sectionChooserOptions?.querySelector(selectors.regions.chooserOption.container);\n        if (!firstChooserOption) {\n            return;\n        }\n        this.toggleFocusableChooserOption(firstChooserOption, true);\n    }\n\n    /**\n     * Initialise all Boostrap components.\n     */\n    initBootstrapComponents() {\n        this.modalBody.querySelectorAll(selectors.elements.tab).forEach((navTab) => {\n            // Init the Bootstrap Tab navigation.\n            Tab.getOrCreateInstance(navTab);\n        });\n\n        // Set up the carousel.\n        const carousel = this.modalBody.querySelector(selectors.regions.carousel);\n        new Carousel(carousel, {\n            interval: false,\n            pause: true,\n            keyboard: false\n        });\n    }\n\n    /**\n     * Disable the focus of all chooser options in a specific container (section).\n     *\n     * @method disableFocusAllChooserOptions\n     * @param {HTMLElement} tabNav The tab navigation element (from the shown.bs.ta event).\n     */\n    disableFocusAllChooserOptions(tabNav) {\n        const tabId = tabNav.getAttribute(\"href\");\n        const chooserOptions = this.modalBody.querySelector(\n            selectors.regions.getSectionChooserOptions(tabId)\n        );\n\n        if (chooserOptions === null) {\n            return;\n        }\n\n        const allChooserOptions = chooserOptions.querySelectorAll(selectors.regions.chooserOption.container);\n        allChooserOptions.forEach((chooserOption) => {\n            this.toggleFocusableChooserOption(chooserOption, false);\n        });\n    }\n\n    /**\n     * Add or remove a chooser option from the focus order.\n     *\n     * @private\n     * @method toggleFocusableChooserOption\n     * @param {HTMLElement} chooserOption The chooser option element which should be added or removed from the focus order\n     * @param {Boolean} isFocusable Whether the chooser element is focusable or not\n     */\n    toggleFocusableChooserOption(chooserOption, isFocusable) {\n        const chooserOptionLink = chooserOption.querySelector(selectors.actions.addChooser);\n        const chooserOptionHelp = chooserOption.querySelector(selectors.actions.optionActions.showSummary);\n        const chooserOptionFavourite = chooserOption.querySelector(selectors.actions.optionActions.manageFavourite);\n\n        if (isFocusable) {\n            // Set tabindex to 0 to add current chooser option element to the focus order.\n            chooserOption.tabIndex = 0;\n            chooserOptionLink.tabIndex = 0;\n            chooserOptionHelp.tabIndex = 0;\n            chooserOptionFavourite.tabIndex = 0;\n        } else {\n            // Set tabindex to -1 to remove the previous chooser option element from the focus order.\n            chooserOption.tabIndex = -1;\n            chooserOptionLink.tabIndex = -1;\n            chooserOptionHelp.tabIndex = -1;\n            chooserOptionFavourite.tabIndex = -1;\n        }\n    }\n\n    /**\n     * Move the focus to the previous chooser option element.\n     *\n     * @param {HTMLElement} current The current chooser option element\n     */\n    focusNextChooserOption(current) {\n        this.moveChooserOptionFocus(\n            current,\n            (currentOption) => currentOption.nextElementSibling ?? currentOption,\n        );\n    }\n\n    /**\n     * Move the focus to the previous chooser option element.\n     *\n     * @param {HTMLElement} current The current chooser option element\n     */\n    focusPreviousChooserOption(current) {\n        this.moveChooserOptionFocus(\n            current,\n            (currentOption) => currentOption.previousElementSibling ?? currentOption,\n        );\n    }\n\n    /**\n     * Move the focus to the first chooser option element.\n     *\n     * @param {HTMLElement} current The current chooser option element\n     */\n    focusFirstChooserOption(current) {\n        this.moveChooserOptionFocus(\n            current,\n            (currentOption, container) => container.firstElementChild ?? currentOption,\n        );\n    }\n\n    /**\n     * Move the focus to the last chooser option element.\n     *\n     * @param {HTMLElement} current The current chooser option element\n     */\n    focusLastChooserOption(current) {\n        this.moveChooserOptionFocus(\n            current,\n            (currentOption, container) => container.lastElementChild ?? currentOption,\n        );\n    }\n\n    /**\n     * Move the focus to the next chooser option element.\n     *\n     * @private\n     * @param {HTMLElement} current The current chooser option element\n     * @param {Function} getNextFocus Function to get the next focusable element\n     */\n    moveChooserOptionFocus(current, getNextFocus) {\n        const currentOption = this.getClosestChooserOption(current);\n        const container = current.closest(selectors.regions.chooserOptions);\n\n        if (!container || !currentOption) {\n            throw new Error('Invalid chooser options container or current option');\n        }\n\n        const newFocusOption = getNextFocus(currentOption, container);\n        if (!newFocusOption) {\n            return;\n        }\n\n        this.toggleFocusableChooserOption(currentOption, false);\n        this.toggleFocusableChooserOption(newFocusOption, true);\n        newFocusOption.focus();\n    }\n\n    /**\n     * Mark a chooser option as selected.\n     *\n     * @param {HTMLElement} chooserOption The chooser option element to mark as selected.\n     */\n    markChooserOptionAsSelected(chooserOption) {\n        this.unmarkAllChooserOptionAsSelected();\n        chooserOption.classList.add('selected');\n        chooserOption.classList.add('border-primary');\n        chooserOption.setAttribute('aria-selected', 'true');\n\n        const footer = getFirst(this.modal.getFooter());\n        const addButton = footer.querySelector(selectors.actions.addSelectedChooserOption);\n        if (addButton) {\n            addButton.removeAttribute('disabled');\n        }\n    }\n\n    /**\n     * Unmark all chooser options as selected.\n     */\n    unmarkAllChooserOptionAsSelected() {\n        const selectedOptions = this.modalBody.querySelectorAll(`${selectors.regions.chooserOption.container}.selected`);\n        selectedOptions.forEach((option) => {\n            option.classList.remove('selected');\n            option.classList.remove('border-primary');\n            option.setAttribute('aria-selected', 'false');\n        });\n\n        const footer = getFirst(this.modal.getFooter());\n        const addButton = footer.querySelector(selectors.actions.addSelectedChooserOption);\n        if (addButton) {\n            addButton.setAttribute('disabled', 'disabled');\n        }\n    }\n}\n"],"names":["constructor","dialogue","modal","exporter","modalBody","this","getBody","getSearchInputElement","querySelector","selectors","actions","search","getClosestChooserOption","element","closest","regions","chooserOption","container","isFavoutiteTabActive","favouriteTab","favouriteTabNav","classList","contains","getChooserOptionUrl","optionContainer","optionLink","addChooser","Error","getAttribute","searchResultsData","searchResultsContainer","searchResults","clearSearchButton","clearSearch","renderSearchResults","firstSearchResultItem","chooserOptions","toggleFocusableChooserOption","remove","tabContent","categoryContent","add","cleanSearchResults","innerHTML","templateData","getSearchResultData","html","js","Templates","renderForPromise","replaceNodeContents","showAllActivitiesTab","navTab","allTabNav","pendingPromise","Pending","addEventListener","resolve","once","getOrCreateInstance","show","updateItemStarredIcons","internal","favourite","favouriteButtons","querySelectorAll","elements","moduleItem","optionActions","manageFavourite","Array","from","forEach","toggle","dataset","favourited","setAttribute","favouriteIconActive","favouriteIconInactive","iconSelectsor","favouriteIcon","mappedModules","getFavouriteTabData","favouriteArea","toggleFavouriteTabDisplay","displayed","moveFocusTo","tabIndex","focus","initActiveTabNavigation","moduleData","carousel","help","spinnerPromise","transitionPromiseResolver","transitionPromise","Promise","contentPromise","getModuleHelpTemplateData","all","then","_ref","chooserSummary","header","catch","Notification","exception","getInstance","next","hideModuleHelp","to","focusChooserOption","setBackButtonModuleData","footer","getFooter","modnameValue","componentname","link","closeOption","modname","toggleBackButton","toggleAddButton","addSelectedChooserOption","toggleActiveFooter","activeFooter","currentTabNav","activetab","activeSectionId","newCurrent","getSectionChooserOptions","getModuleSelector","disableFocusAllChooserOptions","contentEditable","sectionChooserOptions","firstChooserOption","initBootstrapComponents","tab","Carousel","interval","pause","keyboard","tabNav","tabId","isFocusable","chooserOptionLink","chooserOptionHelp","showSummary","chooserOptionFavourite","focusNextChooserOption","current","moveChooserOptionFocus","currentOption","nextElementSibling","focusPreviousChooserOption","previousElementSibling","focusFirstChooserOption","firstElementChild","focusLastChooserOption","lastElementChild","getNextFocus","newFocusOption","markChooserOptionAsSelected","unmarkAllChooserOptionAsSelected","addButton","removeAttribute","option"],"mappings":"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"}